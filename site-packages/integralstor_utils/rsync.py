"""
This file generates the rsync config.
Assumed is that, xinetd is already installed and rsync deamon is enabled in xinetd

Path of config : /etc/rsyncd.conf

Default Config :
[rsync_share_name]

path=/pool/dataset/dir
comment="Description of this share"
list=true
readonly = False, Selectable
uid = integralstor (Selectable)
gid = integralsto (Selectable)r

"""

import config
import db


def _generate_rsync_config():
    try:
        shares, err = load_shares_list()
        if err:
            raise Exception(err)
        with open("/etc/rsyncd.conf", "w") as f:
            f.write("uid = integralstor\n")
            f.write("gid = integralstor\n")
            f.write("\n")
            for share in shares:
                f.write("[%s]\n" % share["name"])
                f.write("\n")
                f.write("path = %s\n" % share["path"])
                f.write("comment = %s\n" % share["comment"])
                list = 'true' if share["list"] else 'false'
                readonly = 'true' if share["readonly"] else 'false'
                f.write("list = %s\n" % list)
                f.write("readonly = %s\n" % readonly)
                f.write("\n")
    except Exception, e:
        return False, 'Error generating rsync config : %s' % str(e)
    else:
        return True, None


def create_rsync_share(name, path, comment, list, readonly, uid, gid):
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)

        check, err = db.get_single_row(
            db_path, "select * from rsync_shares where name='%s'" % name)
        if check:
            raise Exception("Share already exists.Use a different share name")

        cmd_list = []
        cmd = ["insert into rsync_shares (name,path,comment,list,readonly,uid,gid) values(?,?,?,?,?,?,?)", (
            name, path, comment, list, readonly, uid, gid)]
        cmd_list.append(cmd)
        ret, err = db.execute_iud(db_path, cmd_list)
        if err:
            raise Exception(err)
        conf, err = _generate_rsync_config()
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error saving rsync config settings : %s' % str(e)
    else:
        return True, None


def get_rsync_share_details(name):
    share = None
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        share, err = db.get_single_row(
            db_path, "select * from rsync_shares where name='%s'" % name)
        if not share:
            raise Exception("Specified share not found ")
    except Exception, e:
        return False, 'Error deleting the share: %s' % str(e)
    else:
        return share, None


def delete_rsync_share(name):
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        cmd_list = []
        check, err = db.get_single_row(
            db_path, "select * from rsync_shares where name='%s'" % name)
        if not check:
            raise Exception("Specified share not found ")
        cmd = ["delete from rsync_shares where name='%s'" % name]
        cmd_list.append(cmd)
        ret, err = db.execute_iud(db_path, cmd_list)
        if err:
            raise Exception(err)
        conf, err = _generate_rsync_config()
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error deleting the share: %s' % str(e)
    else:
        return True, None


def delete_all_rsync_shares():
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        cmd_list = []
        cmd = ['delete from rsync_shares']
        cmd_list.append(cmd)
        ret, err = db.execute_iud(db_path, cmd_list)
        if err:
            raise Exception(err)
        conf, err = _generate_rsync_config()
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error deleting all rsync shares : %s' % str(e)
    else:
        return True, None


"""
Load the list of currently created rsync shares from the db.
"""


def load_shares_list():
    l = []
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        l, err = db.get_multiple_rows(db_path, 'select * from rsync_shares')
        if err:
            raise Exception(err)
    except Exception, e:
        return None, 'Error loading RSYNC shares list : %s' % str(e)
    else:
        return l, None


def main():
    # print create_rsync_share("test", "/server/rsync/hello", "Testing rsync deamon again", True, True, "integralstor", "integralstor")
    # print create_rsync_share("test2", "/server/rsync/hello", "Testing rsync deamon again", True, False, "integralstor", "integralstor")
    # print load_shares_list()
    # print delete_rsync_share("test")
    # print _generate_rsync_config()
    pass


if __name__ == "__main__":
    main()

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
