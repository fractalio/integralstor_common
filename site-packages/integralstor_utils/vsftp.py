import shutil
import re
import os
from integralstor_utils import services_management, config as integralstor_config

"""
Read the vsftp.conf file and get the current configuration from it.
"""


def get_ftp_config():
    config = {}
    try:
        with open('/etc/vsftpd/vsftpd.conf', 'r') as f:
            for line in f:
                res = re.search(
                    '[\s]*(?i)rsa_cert_file[\s]*=[\s]*([\S]+)', line)
                if res and res.groups():
                    cert_file_loc = res.groups()[0]
                    cert_file_end_pos = cert_file_loc.rfind('/')
                    if cert_file_end_pos:
                        cert_file_start_pos = cert_file_loc[:cert_file_end_pos].rfind(
                            '/')
                        if cert_file_start_pos:
                            config['cert_name'] = cert_file_loc[cert_file_start_pos +
                                                                1:cert_file_end_pos]

                res = re.search('[\s]*(?i)local_root[\s]*=[\s]*([\S]+)', line)
                if res and res.groups():
                    local_root_loc = res.groups()[0]
                    dataset_end_pos = local_root_loc.rfind('/')
                    if dataset_end_pos:
                        config['dataset'] = local_root_loc[1:dataset_end_pos]

                res = re.search('[\s]*(?i)ssl_enable[\s]*=[\s]*([\S]+)', line)
                if res and res.groups():
                    val = res.groups()[0]
                    if val.lower() == 'no':
                        config['ssl_enabled'] = False
                    else:
                        config['ssl_enabled'] = True
    except Exception, e:
        return None, 'Error getting FTP configuration : %s' % str(e)
    else:
        return config, None


"""
For all existing local users, make sure they have an FTP home directory created.
"""


def create_ftp_user_dirs(dataset, users):
    # This is needed to make sure that every local user has their FTP
    # directory created
    try:
        # print users
        for user in users:
            path = '/%s/%s/' % (dataset, user['username'])
            if not os.path.exists(path):
                os.makedirs(path)
            os.chown(path, user['uid'], user['gid'])
    except Exception, e:
        return False, 'Error updating FTP users configuration : %s' % str(e)
    else:
        return True, None


"""
Generate the vsftp.conf given a config dict
"""


def update_ftp_config(config):
    try:
        pki_dir, err = integralstor_config.get_pki_dir()
        if err:
            raise Exception(err)
        with open('/tmp/vsftpd.conf', 'w') as f:
            f.write(
                "# AutoGenerated by IntegralStor. Do not change this file manually \n")
            f.write('anonymous_enable=NO\n')
            f.write('local_enable=YES\n')
            f.write('listen=YES\n')
            f.write('local_umask=022\n')
            f.write('dirmessage_enable=YES\n')
            f.write('connect_from_port_20=YES\n')
            f.write('xferlog_enable=YES\n')
            f.write('xferlog_file=/var/log/xferlog\n')
            f.write('xferlog_std_format=YES\n')
            f.write('ftpd_banner=Welcome to the IntegralStor FTP service.\n')
            f.write('chroot_local_user=YES\n')
            # f.write('user_config_dir=/etc/vsftpd/users\n')
            f.write('local_root=/%s/$USER\n' % config['dataset'])
            f.write('user_sub_token=$USER\n')
            f.write('dirlist_enable=YES\n')
            f.write('download_enable=YES\n')
            f.write('write_enable=YES\n')
            f.write('pam_service_name=vsftpd\n')
            f.write('userlist_enable=YES\n')
            f.write('tcp_wrappers=YES\n')
            if config['ssl_enabled']:
                f.write('ssl_enable=yes\n')
                f.write('rsa_cert_file=%s/%s/%s.cert\n' %
                        (pki_dir, config['cert_name'], config['cert_name']))
                f.write('rsa_private_key_file=%s/%s/%s.cert\n' %
                        (pki_dir, config['cert_name'], config['cert_name']))
                f.write('allow_anon_ssl=NO\n')
                f.write('force_local_data_ssl=YES\n')
                f.write('force_local_logins_ssl=YES\n')
                f.write('ssl_tlsv1=YES\n')
                f.write('ssl_sslv2=NO\n')
                f.write('ssl_sslv3=NO\n')
                f.write('require_ssl_reuse=NO\n')
                f.write('ssl_ciphers=HIGH\n')
            else:
                f.write('ssl_enable=no\n')
        shutil.move('/tmp/vsftpd.conf', '/etc/vsftpd/vsftpd.conf')
        ret, err = services_management.update_service_status(
            'vsftpd', 'restart')
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error updating FTP configuration files : %s' % str(e)
    else:
        return True, None


def delete_ftp_config():
    try:
        with open('/etc/vsftpd/vsftpd.conf', 'w') as f:
            pass
        ret, err = services_management.update_service_status(
            'vsftpd', 'restart')
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error removing FTP configuration : %s' % str(e)
    else:
        return True, None


if __name__ == '__main__':
    print get_ftp_config()

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
