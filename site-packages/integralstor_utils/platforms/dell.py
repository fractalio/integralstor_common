
from xml.etree import ElementTree
from integralstor_utils import command
import collections


def get_psu_status():
    return_dict = {}
    try:
        lines, err = command.get_command_output(
            '/opt/dell/srvadmin/sbin/omreport chassis pwrsupplies -fmt xml')
        if err:
            raise Exception(err)
        if lines:
            # print lines
            root = ElementTree.fromstring(''.join(lines))
            sl = root.findall('Chassis/Redundancy/RedunStatus')
            for s in sl:
                redundancy_str = s.text
                if redundancy_str == '4':
                    return_dict['redundancy'] = True
                else:
                    return_dict['redundancy'] = False
            psus_info = root.find('Chassis/PowerSupplyList')
            if psus_info is not None:
                if 'count' in psus_info.attrib:
                    return_dict['psu_count'] = int(psus_info.attrib['count'])
                psus = root.findall('Chassis/PowerSupplyList/PowerSupply')
                # print psus
                psu_list = []
                for psu in psus:
                    switch_dict = {}
                    switch_on = psu.find('PSSwitchOn')
                    if switch_on is not None:
                        if switch_on.text == 'true':
                            switch_dict['switch_on'] = True
                        else:
                            switch_dict['switch_on'] = False
                    prescence = psu.find('PSState/PSPresenceDetected')
                    if prescence is not None:
                        if prescence.text == 'true':
                            switch_dict['prescence'] = True
                        else:
                            switch_dict['prescence'] = False
                    failure = psu.find('PSState/PSFailureDetected')
                    if failure is not None:
                        if failure.text == 'true':
                            switch_dict['failure'] = True
                        else:
                            switch_dict['failure'] = False
                    psu_list.append(switch_dict)
            return_dict['psu_list'] = psu_list
    except Exception, e:
        return None, 'Error retrieving PSU information : %s' % e
    else:
        return return_dict, None


def get_hardware_raid_to_unix_mapping():
    mapping_dict = {}
    try:
        lines, err = command.get_command_output(
            '/opt/dell/srvadmin/sbin/omreport storage vdisk -fmt xml')
        if err:
            raise Exception(err)
        if lines:
            root = ElementTree.fromstring(''.join(lines))
            sl = root.findall('VirtualDisks/DCStorageObject')
            for s in sl:
                vd_dict = {}
                # print s
                node = s.find('DeviceName')
                if node is not None:
                    device_name = node.text
                else:
                    print 'No device name for this virtual device'
                    continue
                node = s.find('Layout')
                if node is not None:
                    try:
                        layout = int(node.text)
                        if layout == 4:
                            vd_dict['layout'] = 'RAID-1'
                    except Exception, e:
                        pass
                node = s.find('ObjStatus')
                if node is not None:
                    try:
                        status = int(node.text)
                        if status == 2:
                            vd_dict['status'] = 'Ok'
                        elif status == 3:
                            vd_dict['status'] = 'Non-Critical'
                    except Exception, e:
                        pass
                node = s.find('ObjState')
                if node is not None:
                    try:
                        state = int(node.text)
                        if state == 1:
                            vd_dict['state'] = 'Ready'
                        elif state == 32:
                            vd_dict['state'] = 'Degraded'
                    except Exception, e:
                        pass
                node = s.find('ControllerNum')
                if node is not None:
                    try:
                        controller_number = int(node.text)
                        vd_dict['controller_number'] = controller_number
                    except Exception, e:
                        pass
                node = s.find('DeviceID')
                if node is not None:
                    try:
                        device_id = int(node.text)
                        vd_dict['device_id'] = device_id
                    except Exception, e:
                        pass
                mapping_dict[device_name] = vd_dict
    except Exception, e:
        return None, 'Error retrieving hardware raid to unix mapping : %s' % e
    else:
        return mapping_dict, None


def get_hardware_raid_hard_drives(controller_number, device_id):
    disk_list = []
    try:
        lines, err = command.get_command_output(
            '/opt/dell/srvadmin/sbin/omreport storage pdisk controller=%s vdisk=%d -fmt xml' % (controller_number, device_id))
        if err:
            raise Exception(err)
        if lines:
            root = ElementTree.fromstring(''.join(lines))
            sl = root.findall('ArrayDisks/DCStorageObject')
            for s in sl:
                disk_dict = {}
                node = s.find('DeviceSerialNumber')
                if node is not None:
                    disk_dict['serial_number'] = node.text
                node = s.find('DiskProductVendor')
                if node is not None:
                    disk_dict['vendor'] = node.text
                node = s.find('ProductID')
                if node is not None:
                    disk_dict['product_id'] = node.text
                node = s.find('ManufactureDay')
                if node is not None:
                    disk_dict['manufacture_day'] = node.text
                node = s.find('ManufactureWeek')
                if node is not None:
                    disk_dict['manufacture_week'] = node.text
                node = s.find('ManufactureYear')
                if node is not None:
                    disk_dict['manufacture_year'] = node.text
                node = s.find('ObjStatus')
                if node is not None:
                    try:
                        status = int(node.text)
                        if status == 2:
                            disk_dict['status'] = 'Ok'
                        elif status == 4:
                            disk_dict['status'] = 'Critical'
                        else:
                            disk_dict['status'] = 'Unknown'
                    except Exception, e:
                        pass
                node = s.find('ObjState')
                if node is not None:
                    try:
                        state = int(node.text)
                        if state == 4:
                            disk_dict['state'] = 'Online'
                        elif state == 8388608:
                            disk_dict['state'] = 'Rebuilding'
                        elif state == 1024:
                            disk_dict['state'] = 'Removed'
                        else:
                            disk_dict['state'] = 'Unknown'
                    except Exception, e:
                        pass
                disk_list.append(disk_dict)
    except Exception, e:
        return None, 'Error retrieving hard drive info under hardware raid : %s' % e
    else:
        return disk_list, None


def get_alert_logs():
    alerts_odict = None
    try:
        alerts_dict = {}
        lines, err = command.get_command_output(
            '/opt/dell/srvadmin/sbin/omreport system alertlog -fmt xml')
        if err:
            raise Exception(err)
        if lines:
            root = ElementTree.fromstring(''.join(lines))
            sl = root.findall('LogEntry')
            for s in sl:
                # print s
                alert_dict = {}
                timestamp = None
                node = s.find('TimeStamp')
                if node is not None:
                    timestamp = int(node.text)
                    alert_dict['timestamp'] = timestamp
                node = s.find('DateTime')
                if node is not None:
                    alert_dict['date_time'] = node.text
                node = s.find('Description')
                if node is not None:
                    alert_dict['description'] = node.text
                node = s.find('Category')
                if node is not None:
                    alert_dict['category'] = node.text
                node = s.find('ID')
                if node is not None:
                    id = int(node.text)
                    alert_dict['id'] = id
                node = s.find('Type')
                if node is not None:
                    type = int(node.text)
                    if type == 2:
                        alert_dict['Severity'] = 'Non-Critical'
                    elif type == 1:
                        alert_dict['Severity'] = 'Critical'
                    elif type == 4:
                        alert_dict['Severity'] = 'Ok'
                if not timestamp in alerts_dict:
                    alerts_dict[timestamp] = []
                alerts_dict[timestamp].append(alert_dict)
        alerts_odict = collections.OrderedDict(
            sorted(alerts_dict.items(), reverse=True))
    except Exception, e:
        return None, 'Error retrieving alerts : %s' % e
    else:
        return alerts_odict, None


def get_idrac_addr():
    url = None
    try:
        lines, err = command.get_command_output(
            '/opt/dell/srvadmin/sbin/omreport system summary -fmt xml')
        if err:
            raise Exception(err)
        if lines:
            root = ElementTree.fromstring(''.join(lines))
            sl = root.findall('OMA/EMPObjSummary/EMPObj/Url')
            # print sl
            if sl:
                url = '%s/login.html' % sl[0].text
    except Exception, e:
        return None, 'Error retrieving IDRAC URL : %s' % e
    else:
        return url, None


def get_all_disks(controller_number):
    disks_dict = {}
    try:
        lines, err = command.get_command_output(
            '/opt/dell/srvadmin/sbin/omreport storage pdisk controller=%d -fmt xml' % controller_number)
        if err:
            raise Exception(err)
        if lines:
            root = ElementTree.fromstring(''.join(lines))
            sl = root.findall('ArrayDisks/DCStorageObject')
            for s in sl:
                # print s
                serial_number = None
                disk_dict = {}
                disk_dict['controller_number'] = controller_number
                node = s.find('TargetID')
                if node is not None:
                    target_id = node.text
                    disk_dict['target_id'] = target_id
                node = s.find('EnclosureID')
                if node is not None:
                    enclosure_id = node.text
                    disk_dict['enclosure_id'] = enclosure_id
                node = s.find('Channel')
                if node is not None:
                    channel = node.text
                    disk_dict['channel'] = channel
                node = s.find('DeviceSerialNumber')
                if node is not None:
                    serial_number = (node.text).strip().upper()
                    disk_dict['serial_number'] = serial_number
                else:
                    print 'No serial number found!'
                    continue
                node = s.find('DiskProductVendor')
                if node is not None:
                    disk_dict['vendor'] = node.text
                node = s.find('ProductID')
                if node is not None:
                    disk_dict['product_id'] = node.text
                node = s.find('ManufactureDay')
                if node is not None:
                    disk_dict['manufacture_day'] = node.text
                node = s.find('ManufactureWeek')
                if node is not None:
                    disk_dict['manufacture_week'] = node.text
                node = s.find('ManufactureYear')
                if node is not None:
                    disk_dict['manufacture_year'] = node.text
                node = s.find('ObjStatus')
                if node is not None:
                    try:
                        status = int(node.text)
                        if status == 2:
                            disk_dict['status'] = 'Ok'
                        elif status == 4:
                            disk_dict['status'] = 'Critical'
                        elif status == 3:
                            disk_dict['status'] = 'Non-Critical'
                        else:
                            disk_dict['status'] = 'Unknown'
                    except Exception, e:
                        pass
                node = s.find('BusProtocol')
                if node is not None:
                    try:
                        bus_protocol = int(node.text)
                        if bus_protocol == 7:
                            disk_dict['bus_protocol'] = 'SATA'
                        elif bus_protocol == 8:
                            disk_dict['bus_protocol'] = 'SAS'
                        else:
                            disk_dict['bus_protocol'] = 'Unknown'
                    except Exception, e:
                        pass
                node = s.find('ObjState')
                if node is not None:
                    try:
                        state = int(node.text)
                        if state == 4:
                            disk_dict['state'] = 'RAID-Online'
                        elif state == 8388608:
                            disk_dict['state'] = 'Rebuilding'
                        elif state == 4096:
                            disk_dict['state'] = 'Non-RAID'
                        elif state == 1024:
                            disk_dict['state'] = 'Removed'
                        else:
                            disk_dict['state'] = 'Unknown'
                    except Exception, e:
                        pass
                disks_dict[serial_number] = disk_dict
    except Exception, e:
        return None, 'Error retrieving all disks info : %s' % e
    else:
        return disks_dict, None


def blink_unblink_disk(action, controller_id, channel_id, enclosure_id, target_id):
    try:
        cmd = '/opt/dell/srvadmin/sbin/omconfig storage pdisk action=%s controller=%s pdisk=%s:%s:%s' % (
            action, controller_id, channel_id, enclosure_id, target_id)
        # print cmd
        lines, err = command.get_command_output(cmd)
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error blinking/un-blonking disk : %s' % e
    else:
        return True, None

# print get_psu_status()
# print get_hardware_raid_to_unix_mapping()
# print get_hardware_raid_hard_drives(0, 0)
#d, err = get_all_disks(2)
# print len(d)
# print d
# print get_alert_logs()
# print get_idrac_addr()

# print blink_unblink_disk('unblink', 0, 0, 1, 7)


'''
  try:
  except Exception, e:
  else:
'''

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
