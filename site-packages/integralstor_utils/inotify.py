import sys
import pytz
import datetime
import os
from integralstor_utils import db, config


def get_count(action='READ', past_x_seconds=60):
    count = -1
    try:
        config_dir, err = config.get_config_dir()
        if err:
            raise Exception(err)

        if action != 'ALL':
            query = "select count(*) as count from logs where timestamp >= Datetime('now', '-%d seconds');" % past_x_seconds
        else:
            query = "select count(*) as count from logs where actions = '%s' and timestamp >= Datetime('now', '-%d seconds');" % (
                action.upper(), past_x_seconds)
        # print query
        db_path = '%s/db/inotify.db' % config_dir
        ret, err = db.get_single_row(db_path, query)
        if err:
            print err
        count = ret['count']
        # print ret
    except Exception, e:
        return -1, 'Error getting counts : %s' % str(e)
    else:
        return count, None


def remove_old_entries(older_than=43200):
    try:
        config_dir, err = config.get_config_dir()
        if err:
            raise Exception(err)
        query = "delete from logs where timestamp < Datetime('now', '-%d seconds');" % older_than
        # print query
        db_path = '%s/db/inotify.db' % config_dir
        ret, err = db.execute_iud(db_path, [[query]])
        if err:
            print err
        # print ret
    except Exception, e:
        return False, 'Error purging old entries : %s' % str(e)
    else:
        return True, None


def add_to_db(dir, action, file=None):
    try:
        if file:
            path = '%s/%s' % (dir, file)
        else:
            path = dir

        path = os.path.normpath(path)

        tz = pytz.timezone('UTC')
        now_utc = datetime.datetime.now(tz)

        time = now_utc.strftime('%Y-%m-%d %H:%M:%S')

        config_dir, err = config.get_config_dir()
        if err:
            raise Exception(err)

        db_path = '%s/db/inotify.db' % config_dir
        ret, err = db.execute_iud(db_path, [
                                  ["insert into logs (path, actions, timestamp) values (?, ?, ?)", (path, action, time,)]])
        if err:
            print err

    except Exception, e:
        return False, 'Error inserting into database dir - %s, action - %s, file = %s : %s' % (dir, action, file, str(e))
    else:
        return True, None


def main():
    # usage add_to_db dir file action time
    # print sys.argv

    if len(sys.argv) != 2:
        print "Usage : python inotify.py inotify_str"
        sys.exit(-1)

    args = [x.strip() for x in sys.argv[1].split(',')]

    if len(args) < 3:
        file = None
    else:
        file = args[2]

    ret, err = add_to_db(args[0], args[1], file)
    if err:
        print err


if __name__ == '__main__':
    main()

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
