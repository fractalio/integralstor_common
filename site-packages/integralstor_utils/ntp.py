import re
import shutil
from integralstor_utils import command, config
from integralstor_utils import services_management

"""
Parse the ntp.conf file to determine the list of ntp servers.
"""


def get_ntp_servers():

    list = []
    try:
        ntp_conf_path, err = config.get_ntp_conf_path()
        if err:
            raise Exception(err)
        with open("%s/ntp.conf" % ntp_conf_path, "r") as f:
            lines = f.readlines()
            for line in lines:
                r1 = re.match("[\s]*server[\s]*([\S]+)", line)
                if r1:
                    r = r1.groups()
                    if len(r) > 0:
                        s = r[0]
                        if s and s != "127.0.0.1":
                            list.append(s)
    except Exception, e:
        return None, 'Error getting NTP server list : %s' % str(e)
    else:
        return list, None


def update_integralstor_ntp_servers(server_list):
    try:
        with open('/tmp/ntp.conf', 'w') as temp:
            # First create the ntp.conf file for the primary and
            # secondary nodes
            temp.write("driftfile /var/lib/ntp/drift\n")
            temp.write(
                "restrict default kod nomodify notrap nopeer noquery\n")
            temp.write(
                "restrict -6 default kod nomodify notrap nopeer noquery\n")
            temp.write("logfile /var/log/ntp.log\n")
            temp.write("\n")
            for server in server_list:
                temp.write("server %s iburst\n" % server)
            temp.flush()
            temp.close()
        shutil.move('/tmp/ntp.conf', '/etc/ntp.conf')
        ret, err = services_management.update_service_status(
            'ntpd', 'restart')
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error updating NTP settings : %s' % str(e)
    else:
        return True, None


def sync_ntp():
    return_dict = {}
    try:
        ntp_servers, err = get_ntp_servers()
        if err:
            raise Exception(err)
        if len(ntp_servers) < 1:
            raise Exception(
                "NTP servers are not configured, Please configure at least one server to sync")
        output, err = services_management.update_service_status('ntpd', 'stop')
        if err:
            raise Exception(err)
        for server in ntp_servers:
            cmd = "ntpdate -b %s" % server
            output, err = command.get_command_output(cmd, shell=True)
            if err:
                continue
            else:
                return_dict['ntp_sync'] = True
                return_dict['server_used'] = server
                break
        output, err = services_management.update_service_status(
            'ntpd', 'start')
        if err:
            raise Exception(err)

    except Exception, e:
        return None, 'Sync failed'
    else:
        return return_dict, None


# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
