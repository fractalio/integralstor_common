
import json
import pprint
import os
import shutil
import subprocess
from datetime import date, timedelta


sar_dir_path = '/var/log/sa'


def get_system_stats(dt, start, end, stat_type):
    ''' Process the sadf stats for a node of a given type. Type can be one of cpu, network, memory, queue, disk'''
    d1 = None
    try:
        d, err = load_stats(dt, start, end)
        if d:
            if 'sysstat' not in d or 'hosts' not in d['sysstat']:
                raise Exception(
                    "Error getting system statistics : No statistics available for any host.")
            d1, err = process_host(d['sysstat']['hosts'][0], stat_type)
            if err:
                raise Exception(err)
            if not d1:
                raise Exception('Error getting statistics for host %s : %s' % (
                    d['sysstat']['hosts'][0]['nodename'], err))
    except Exception, e:
        return None, 'Error processing system statistics : %s' % str(e)
    else:
        return d1, None


def process_host(id, stat_type):
    ''' Given a dict section of the sadf output, return a dict with a key for each stat type '''

    try:
        if not id or 'statistics' not in id:
            raise Exception('No statistics passed.')
        stats = []
        d = {}
        if stat_type == 'cpu':
            d['iowait'] = []
            d['system'] = []
            d['idle'] = []
            d['user'] = []
        elif stat_type == 'memory':
            d['memused-percent'] = []
            d['memused'] = []
            d['memfree'] = []
        elif stat_type == 'queue':
            d['ldavg-1'] = []
            d['ldavg-5'] = []
            d['ldavg-15'] = []
            d['runq-sz'] = []

        date_set = False
        for stat in id['statistics']:
            # print stat['network']
            if not date_set:
                d['date'] = stat['timestamp']['date']
            if stat_type == 'cpu':
                if 'cpu-load' not in stat:
                    continue
                stats.append(stat['cpu-load'])
                d['iowait'].append(
                    [stat['timestamp']['time'], stat['cpu-load'][0]['iowait']])
                d['system'].append(
                    [stat['timestamp']['time'], stat['cpu-load'][0]['system']])
                d['idle'].append([stat['timestamp']['time'],
                                  stat['cpu-load'][0]['idle']])
                d['user'].append([stat['timestamp']['time'],
                                  stat['cpu-load'][0]['user']])
            elif stat_type == 'memory':
                if 'memory' not in stat:
                    continue
                # print stat['timestamp']
                d['memused-percent'].append([stat['timestamp']
                                             ['time'], stat['memory']['memused-percent']])
                d['memused'].append(
                    [stat['timestamp']['time'], stat['memory']['memused']])
                d['memfree'].append(
                    [stat['timestamp']['time'], stat['memory']['memfree']])
            elif stat_type == 'queue':
                if 'queue' not in stat:
                    continue
                d['ldavg-1'].append([stat['timestamp']['time'],
                                     stat['queue']['ldavg-1']])
                d['ldavg-5'].append([stat['timestamp']['time'],
                                     stat['queue']['ldavg-5']])
                d['ldavg-15'].append([stat['timestamp']
                                      ['time'], stat['queue']['ldavg-15']])
                d['runq-sz'].append([stat['timestamp']['time'],
                                     stat['queue']['runq-sz']])
            elif stat_type == 'disk':
                if 'disk' not in stat:
                    continue
                d = {}
                if 'disk' in stat:
                    for device in stat['disk']:
                        td = {}
                        #td['time'] = when
                        #td['data'] = device
                        if not device['disk-device'] in d:
                            d[device['disk-device']] = []
                        d[device['disk-device']].append(device)
            elif stat_type == 'network':
                if 'network' not in stat:
                    continue
                if 'network' in stat and 'net-dev' in stat['network']:
                    for iface in stat['network']['net-dev']:
                        if iface['iface'] not in d:
                            d[iface['iface']] = {}
                        if 'ifutil-percent' not in d[iface['iface']]:
                            d[iface['iface']]['ifutil-percent'] = []
                        d[iface['iface']]['ifutil-percent'].append(
                            [stat['timestamp']['time'], iface['ifutil-percent']])
    except Exception, e:
        return None, "Error processing the host's statistics : %s" % str(e)
    else:
        return d, None


def load_stats(dt, start, end):
    ''' Load the sar stats from the appropriate directory '''
    d = None
    # print start, end
    try:
        if os.path.exists('/var/log/sa/sa%s' % dt):
            proc = subprocess.Popen(['sadf', '-T', '-j', '/var/log/sa/sa%s' % dt, '--', '-qurd',
                                     '-n', 'DEV', '-s', '%s' % start, '-e', '%s' % end], stdout=subprocess.PIPE)
            ret = proc.communicate()
            d = json.loads(ret[0].strip())

    except Exception, e:
        return None, "Error loading system stats : %s" % str(e)
    else:
        return d, None


def backup_sa_file():
    ''' Utility function to be called from cron to back up previous days sar file '''
    yesterday = date.today() - timedelta(1)
    yesterday_date = yesterday.strftime('%d')
    if os.path.isfile('%s/sa%s' % (sar_dir_path, yesterday_date)):
        # print "Found file for yesterday : %s/sa%s" % (sar_dir_path,
        # yesterday_date)
        shutil.copyfile('%s/sa%s' % (sar_dir_path, yesterday_date),
                        '/home/bkrram/sa%s' % yesterday.strftime('%m%d%y'))
    else:
        # print 'oops. not there'
        pass


def main():
    # cpu,disk,memory,queue,network
    d, err = get_system_stats('11', 'cpu')
    if not d:
        # print "Could not get system statistics : %s" % err
        pass
    else:
        # pp = pprint.PrettyPrinter(indent=4)
        # pp.pprint(d)
        pass
    '''
  backup_sa_file()
  '''


if __name__ == '__main__':
    main()

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
