from integralstor_utils import db, config, scheduler_utils


def add_remote_replication(source_dataset, destination_ip, destination_username, destination_pool, cron_task_id):
    remote_replication_id = None
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        cmd = "insert into remote_replications (source_dataset,destination_ip,destination_user_name,destination_pool, cron_task_id) values ('%s','%s','%s','%s', '%d')" % (
            source_dataset, destination_ip, destination_username, destination_pool, cron_task_id)
        remote_replication_id, err = db.execute_iud(
            db_path, [[cmd], ], get_rowid=True)
        if err:
            raise Exception(err)
    except Exception, e:
        return None, 'Error adding a remote replication task : %s' % e
    else:
        return remote_replication_id, None


def update_remote_replication(remote_replication_id, new_cron_task_id):
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        cmd = "update remote_replications set cron_task_id='%d' where remote_replication_id='%s'" % (
            new_cron_task_id, remote_replication_id)
        rowid, err = db.execute_iud(db_path, [[cmd], ], get_rowid=True)
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error updating  remote replication task : %s' % e
    else:
        return True, None


def delete_remote_replication(remote_replication_id):
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        cmd = "delete from remote_replications where remote_replication_id='%s'" % remote_replication_id
        rowid, err = db.execute_iud(db_path, [[cmd], ], get_rowid=False)
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error deleting remote replication task : %s' % e
    else:
        return True, None


def delete_all_remote_replications():
    """Delete all scheduled remote replications and respective cron table entries.

    """
    error_list = []
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)

        replications, err = get_remote_replications()
        if err:
            raise Exception(err)
        for replication in replications:
            cron_remove, err = scheduler_utils.delete_cron(
                int(replication['cron_task_id']))
            if err:
                error_list.append(err)

            ret, err = delete_remote_replication(
                int(replication['remote_replication_id']))
            if err:
                error_list.append(err)

        if error_list:
            raise Exception(str(error_list))
    except Exception, e:
        return False, 'Error deleting remote replication tasks : %s' % e
    else:
        return True, None


def get_remote_replications(remote_replication_id=None):
    replications = []
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        if remote_replication_id is not None:
            cmd = "select * from remote_replications where remote_replication_id='%s'" % remote_replication_id
        else:
            cmd = "select * from remote_replications"
        replications, err = db.get_multiple_rows(db_path, cmd)
        if err:
            raise Exception(err)

        if replications is not None:
            # print 'replications - ', replications
            for replication in replications:
                cron_tasks, err = scheduler_utils.get_cron_tasks(
                    replication['cron_task_id'])
                # print cron_tasks
                if err:
                    raise Exception(err)
                if not cron_tasks:
                    raise Exception('Specified replication schedule not found')
                replication['schedule_description'] = cron_tasks[0]['schedule_description']
                replication['description'] = cron_tasks[0]['description']
    except Exception, e:
        return None, 'Error retrieving remote replications : %s' % e
    else:
        return replications, None


def get_remote_replications_with(source_dataset, destination_ip, destination_pool):
    replications = []
    repls = []
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        cmd = "select * from remote_replications where source_dataset='%s' and destination_ip='%s' and destination_pool='%s'" % (
            source_dataset, destination_ip, destination_pool)
        replications, err = db.get_multiple_rows(db_path, cmd)
        if err:
            raise Exception(err)

        if replications is not None:
            # print 'replications - ', replications
            for replication in replications:
                repls, err = get_remote_replications(
                    replication['remote_replication_id'])
                if err:
                    raise Exception(err)

    except Exception, e:
        return None, 'Error retrieving remote replications : %s' % e
    else:
        return repls, None


"""
1. query scheduler tasks for all remote replicate string
2. If not found, then first time, generate first time query
3. If found, order by the scheduled date and get the latest
4. Take the latest from the schedule and database ad then create the query
"""


def schedule_remote_replication(description, dataset, destination_ip, destination_user_name, destination_pool):
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        pos = dataset.find("/")
        if pos == -1:
            raise Exception('Invalid dataset name')
        source_pool = dataset[:pos]
        source_dataset = dataset[(pos + 1):]
        # print 'Source pool is ', source_pool
        # print 'Source dataset is ', source_dataset
        # print 'DestIP is ', destination_ip
        # print 'DestPool is ', destination_pool

        rr, err = get_remote_replications_with(
            dataset, destination_ip, destination_pool)
        # print rr, "\n"
        if err:
            raise Exception(err)
        if not rr:
            raise Exception(
                'Could not locate the specified remote replication task')

        # Check for active replication tasks
        # Modified remote replication is assigned a new cron_task_id.
        # TOFIX: Another replication task might still be 'running' with the old
        # cron_task_id; old cron_task_id may not be in the records, so check
        # for matching descriptions to assert
        existing_tasks, err = scheduler_utils.get_tasks_by_cron_task_id(
            rr[0]['cron_task_id'])
        if err is not None:
            raise Exception(err)
        if existing_tasks:
            for task in existing_tasks:
                if str(task['status']) == "running" and str(task['task_type_id']) == "4":
                    raise Exception(
                        "Will not commence the replication; a background task with the same description is yet to complete its replication!")

        scripts_path, err = config.get_shell_scripts_path()
        if err:
            raise Exception(err)
        path = '%s/replicator.sh' % scripts_path
        cmd = "/bin/bash %s %s %s %s %s %s" % (
            path, source_pool, source_dataset, destination_pool, destination_user_name, destination_ip)
        # print 'Command is ', cmd
        # Retry upto 3 times(default) with a retry interval of 1 hour
        ret, err = scheduler_utils.create_task(description, [
            {'Replication': cmd}], task_type_id=4, run_as_user_name='replicator', retry_interval=60, cron_task_id=rr[0]['cron_task_id'])
        # print "return code, err : ", ret, err
        if err:
            raise Exception(err)
    except Exception, e:
        # print e
        return False, 'Error scheduling remote replication : %s' % e
    else:
        return True, None


if __name__ == "__main__":
    # print schedule_remote_replication("Replication of try-try/send to pool zpool on machine 192.168.1.212", "try-try/send", "192.168.1.212", "replicator", "zpool")
    # print schedule_remote_replication("Replication of try-try/send to pool
    # zpool on machine 192.168.1.212","test-pool/test-send", "192.168.1.129",
    # "replicator", "p1")
    print delete_all_remote_replications()
    pass

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
