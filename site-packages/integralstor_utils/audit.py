import time
import datetime
import os
import os.path
import urllib
import urllib2
import pytz
import django.utils.timezone

from integralstor_utils import file_processing, config, logs, mail, networking, db, system_date_time


def audit(audit_code, audit_str, request, system_initiated=False):
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        if system_initiated is False:
            ip, err = networking.get_client_ip(request.META)
            if err:
                raise Exception(err)
        tz = pytz.timezone('UTC')
        django.utils.timezone.activate(tz)
        now_utc = datetime.datetime.now(tz)
        now = int(now_utc.strftime('%s'))
        if system_initiated:
            username = 'System'
            source_ip = 'System'
        else:
            username = request.user.username
            source_ip, err = networking.get_client_ip(request.META)
            if err:
                raise Exception(err)
        command_list = []
        cmd = [
            'insert into audit(audit_time, username, source_ip, audit_code, audit_str) values (?,?,?,?,?)', (now, username, source_ip, audit_code, audit_str,)]
        command_list.append(cmd)
        ret, err = db.execute_iud(db_path, command_list)
        if err:
            raise Exception(err)

        d, err = mail.load_email_settings()
        if d:
            if d["email_audit"]:
                local_timezone, err = system_date_time.get_current_timezone()
                if err:
                    raise Exception(err)
                if 'timezone_str' not in local_timezone:
                    timezone_str = 'UTC'
                else:
                    timezone_str = local_timezone['timezone_str']
                tz = pytz.timezone(timezone_str)
                now_local = now_utc.astimezone(tz)
                now_local_str = now_local.strftime("%a, %d %b %Y %H:%M:%S")
                mail_mesg = 'Action: %s\n' % audit_str
                mail_mesg += 'Action initiated from: %s\n' % source_ip
                mail_mesg += 'Action performed by: %s\n' % username
                mail_mesg += 'Action performed at: %s\n' % now_local_str
                # print mail_mesg
                hostname, err = networking.get_hostname()
                if err or not hostname:
                    hostname = 'Undetermined hostname'
                ret, err = mail.send_mail(d["server"], d["port"], d["username"], d["pswd"], d["tls"],
                                          d["rcpt_list"], "Audit message from Integralstor " + hostname, mail_mesg)
                if err:
                    raise Exception(err)
    except Exception, e:
        return False, 'Error performing an audit operation : %s' % str(e)
    else:
        return True, None

def delete_all_audits():
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        command_list = []
        cmd = ['delete from audit']
        command_list.append(cmd)
        ret, err = db.execute_iud(db_path, command_list)
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error deleting all audits : %s' % str(e)
    else:
        return True, None

'''
def audit(audit_action, audit_str, ip_meta, system_initiated=False):
    try:
        audit_file, err = _get_audit_file_path()
        if err:
            raise Exception(err)
        if system_initiated is False:
            ip, err = networking.get_client_ip(ip_meta)
            if err:
                raise Exception(err)
        t = int(time.time())
        d = {}
        d["time"] = t
        d["audit_str"] = audit_str
        d["audit_action"] = audit_action
        audit_description = ""
        with open(audit_file, "a") as f:
            if system_initiated is False:
                audit_description = "%-13d %-16s %-25s %-45s\n" % (
                    t, ip, audit_action, audit_str)
            else:
                audit_description = "%-13d %-16s %-25s %-45s\n" % (
                    t, "System", audit_action, audit_str)
            f.write(audit_description)
            f.flush()
        f.close()

        # Audit email trail
        d, err = mail.load_email_settings()
        filename, err = _get_audit_file_path()
        if err:
            raise Exception(err)
        if d:
            if d["email_audit"]:
                hostname, err = networking.get_hostname()
                if err or not hostname:
                    hostname = 'Undetermined hostname'
                ret, err = mail.send_mail(d["server"], d["port"], d["username"], d["pswd"], d["tls"],
                                          d["rcpt_list"], "Audit from Integralstor " + hostname, audit_description)
                if err:
                    raise Exception(err)

    except Exception, e:
        return False, 'Error performing an audit operation : %s' % str(e)
    else:
        return True, None
'''


def get_entries():
    al = []
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        query = 'select * from audit order by audit_id desc'
        rows, err = db.get_multiple_rows(db_path, query)
        if err:
            raise Exception(err)
        if rows:
            for row in rows:
                audit_entry, err = _parse_audit_entry(row)
                if err:
                    raise Exception(err)
                al.append(audit_entry)
    except Exception, e:
        return None, 'Error loading audit entries : %s' % str(e)
    else:
        return al, None


def _parse_audit_entry(entry):
    """Parse a db entry dict from the audit table and return a dict with appropriate fields."""
    try:
        gridcell_action_dict = {
            "vol_stop": "Volume stop",
            "vol_start": "Volume start",
            "vol_delete": "Volume delete",
            "add_brick": "Add volume storage",
            "remove_brick_start": "Remove volume storage - start",
            "remove_brick_status": "Remove volume storage - status",
            "remove_brick_commit": "Remove volume storage - commit",
            "replace_brick_commit": "Replace volume storage - commit",
            "rebalance_start": "Volume rebalance - start",
            "rebalance_status": "Volume rebalance - status",
            "rebalance": "Volume rebalance - start",
            "volume_heal_full": "Full volume heal start",
            "volume_heal_info": "Full volume heal info",
            "create_volume": "Volume creation",
            "expand_volume": "Volume expansion",
            "vol_rebalance_stop": "Stop volume rebalance",
            "log_rotate": "Rotate volume log",
            "add_storage": "Add GRIDCells to trusted storage pool",
            "remove_storage": "Remove GRIDCells from trusted storage pool",
            "vol_rebalance_start": "Start volume rebalance",
            "create_snapshot": "Create volume snapshot",
            "delete_snapshot": "Delete volume snapshot",
            "restore_snapshot": "Restore volume snapshot",
            "deactivate_snapshot": "Deactivate volume snapshot",
            "activate_snapshot": "Activate volume snapshot",
            "set_vol_options": "Set volume option",
            "set_vol_quota": "Set quota",
            "remove_vol_quota": "Remove quota",
            "change_quota_status": "Enable/disable volume quota",
            "replace_node": "Replace GRIDCell",
            "modify_share": "Modify a CIFS share",
            "delete_share": "Delete a CIFS share",
            "create_share": "Create a CIFS share",
            "modify_samba_settings": "Modify CIFS authentication settings",
            "create_local_user": "Create a local user",
            "delete_local_user": "Delete a local user",
            "change_local_user_password": "Change local user password",
            "modify_user": "Modify a local user",
            "hardware_scan_node_added": "Added a new GRIDCell to grid",
            "modify_admin_password": "Modify admin password",
            "create_iscsi_target": "Create ISCSI target ",
            "delete_iscsi_target": "Remove ISCSI target",
            "create_iscsi_lun": "Create ISCSI LUN",
            "delete_iscsi_lun": "Remove ISCSI LUN",
            "add_iscsi_target_authentication": "Add ISCSI target authentication",
            "remove_iscsi_target_authentication": "Remove ISCSI target authentication",
            "replace_disk_offline_disk": "Disk replacement - old disk offlined",
            "replace_disk_scheduled": "Disk replacement - disk replacement successfully scheduled",
            "add_iscsi_acl": "Add ISCSI ACL",
            "remove_iscsi_acl": "Remove ISCSI ACL",
        }
        integralstor_action_dict = {
            "update_system_datetimezone": "Updated system date/time/timezone",
            "factory_defaults_reset": "Factory defaults reset",
            "delete_certificate": "Deleted a SSL certificate",
            "edit_aces": "Access control entry modified",
            "add_aces": "Access control entry created",
            "delete_ace": "Access control entry removed",
            "create_dir": "Directory created",
            "create_self_signed_certificate": "Created a self signed SSL certificate",
            "upload_certificate": "Uploaded a SSL certificate",
            "add_zfs_spares": "Spare disk(s) added to pool",
            "schedule_zfs_snapshot": "Snapshot scheduling added/modified",
            "remove_zfs_spare": "Spare disk removed from pool",
            "remove_zfs_quota": "Removed ZFS quota",
            "set_zfs_quota": "Set ZFS quota",
            "create_vlan": "Created network VLAN",
            "remove_vlan": "Removed network VLAN",
            "modify_local_user_gid": "Local user's primary group set",
            "modify_local_user_grp_membership": "Local user's group membership modified",
            "create_local_user": "Local user created",
            "create_local_group": "Local group created",
            "delete_local_group": "Local group removed",
            "delete_local_user": "Local user removed",
            "change_local_user_password": "Local user password modified",
            "modify_dir_owner_permissions": "Directory ownership/permissions modified",
            "modify_dir_sticky_bit": "Directory sticky bit modified",
            "modify_cifs_share": "CIFS share modified",
            "delete_cifs_share": "CIFS share removed",
            "create_cifs_share": "CIFS share created",
            "modify_samba_settings": "CIFS authentication settings modified",
            "delete_nfs_share": "NFS share removed",
            "edit_nfs_share": "NFS share modified",
            "create_nfs_share": "NFS share created",
            "create_iscsi_target": "ISCSI target created",
            "delete_iscsi_target": "ISCSI target removed",
            "create_iscsi_lun": "ISCSI LUN created",
            "delete_iscsi_lun": "ISCSI LUN removed",
            "add_iscsi_target_authentication": "ISCSI target authentication added",
            "remove_iscsi_target_authentication": "ISCSI target authentication removed",
            "add_iscsi_acl": "ISCSI ACL added",
            "remove_iscsi_acl": "ISCSI ACL removed",
            "change_service_status": "Service status modified",
            "set_interface_state": "Network interface state modified",
            "edit_interface_address": "Network interface address modified",
            "create_bond": "Network interface bond created",
            "remove_bond": "Network interface bond removed",
            "edit_hostname": "System hostname modified",
            "set_dns_nameservers": "DNS nameservers modified",
            "modify_admin_password": "Administrator password modified",
            "create_zfs_pool": "ZFS pool created",
            "expand_zfs_pool": "ZFS pool expanded",
            "import_zfs_pool": "ZFS pool imported",
            "export_zfs_pool": "ZFS pool exported",
            "scrub_zfs_pool": "ZFS pool scrub initiated",
            "clear_zfs_pool": "Clear ZFS pool errors",
            "delete_zfs_pool": "ZFS pool removed",
            "edit_zfs_slog": "ZFS pool write cache modified",
            "remove_zfs_slog": "ZFS pool write cache removed",
            "edit_zfs_l2arc": "ZFS pool read cache modified",
            "remove_zfs_l2arc": "ZFS pool read cache removed",
            "edit_zfs_dataset": "ZFS dataset modified",
            "delete_zfs_dataset": "ZFS dataset removed",
            "create_zfs_zvol": "ZFS block device volume created",
            "delete_zfs_zvol": "ZFS block device volume removed",
            "create_zfs_dataset": "ZFS dataset created",
            "create_zfs_snapshot": "ZFS snapshot created",
            "delete_zfs_snapshot": "ZFS snapshot removed",
            "rollback_zfs_snapshot": "ZFS snapshot rolled back",
            "replace_disk_offline_disk": "Disk replacement - old disk offlined",
            "replace_disk_replaced_disk": "Disk replacement - disk replaced successfully",
            "rename_zfs_snapshot": "ZFS snapshot renamed",
            "create_rsync_share": "Created new RSync share ",
            "edit_rsync_share": "Edited RSync share ",
            "delete_rsync_share": "Deleted RSync share ",
            "remove_background_task": "Removed background task ",
            "create_remote_replication": "Created remote replication ",
            "modify_remote_replication": "Modified remote replication ",
            "remove_remote_replication": "Removed remote replication ",
            "task_fail": "Task failed ",
            "task_start": "Task started ",
            "task_complete": "Task completed ",
            "remove_ssh_user_key": "Removed ssh user key ",
            "upload_ssh_user_key": "Uploaded ssh user key ",
            "remove_ssh_host_key": "Removed ssh host key ",
            "upload_ssh_host_key": "Uploaded ssh host key ",
        }

        platform, err = config.get_platform()
        if err:
            raise Exception(err)
        if not platform:
            raise Exception('Could not determine the platform')
        if platform not in ['integralstor', 'gridcell']:
            raise Exception('Unknown platform')
        if platform == 'integralstor':
            action_dict = integralstor_action_dict
        else:
            action_dict = gridcell_action_dict

        d = {}
        # d["time"] = time.strftime(
        #    "%a, %d %b %Y %H:%M:%S", time.localtime(int(str[:13])))
        # d["time"] = time.strftime(
        #    "%a, %d %b %Y %H:%M:%S", time.localtime(int(entry['audit_time'])))
        tz = pytz.timezone('UTC')
        dt_obj = django.utils.timezone.make_aware(
            datetime.datetime.fromtimestamp(entry['audit_time']), tz)
        local_timezone, err = system_date_time.get_current_timezone()
        if err:
            raise Exception(err)
        if 'timezone_str' not in local_timezone:
            timezone_str = 'UTC'
        else:
            timezone_str = local_timezone['timezone_str']
        tz = pytz.timezone(timezone_str)
        now_local = dt_obj.astimezone(tz)
        d["time"] = now_local.strftime("%a, %d %b %Y %H:%M:%S")
        d["ip"] = entry['source_ip']
        d["username"] = entry['username']
        action = entry['audit_code']
        if action in action_dict:
            d["action"] = action_dict[action]
        else:
            d["action"] = "Unknown"
        d["action_str"] = entry['audit_str']

    except Exception, e:
        return None, 'Error decoding audit entry: %s' % (e)
    else:
        return d, None


def rotate_audit_trail():
    """Rotate the audit trail log file."""
    try:
        audit_dir, err = config.get_audit_dir()
        if err:
            raise Exception(err)
        ret, err = logs.rotate_log(audit_dir, "audit.log", None)
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error rotating audit trail : %s' % str(e)
    else:
        return True, None


'''
def get_lines(file_name=None):
    """Return all the lines from the audit file as a list of dictionaries."""
    al = []
    try:
        err = None
        audit_dir, err = config.get_audit_dir()
        if err:
            raise Exception(err)
        if not file_name:
            fname, err = _get_audit_file_path()
        else:
            fname = "%s/%s" % (audit_dir, file_name)
        if err:
            raise Exception(err)

        if not fname:
            raise Exception("Could not get audit file name.")
        if fname:
            with open(fname, "r") as f:
                for line in file_processing.reversed_lines(f):
                    d, err = _parse_audit_line(line)
                    if err:
                        raise Exception(err)
                    al.append(d)
    except Exception, e:
        return None, 'Error loading audit lines : %s' % str(e)
    else:
        return al, None
'''


def _get_audit_file_path():
    """Get the audit file path. Create the audit directory and file if it does not exist."""
    audit_file = None
    try:
        audit_dir, err = config.get_audit_dir()
        if err:
            raise Exception(err)
        if not os.path.exists(audit_dir):
            try:
                os.mkdir(audit_dir)
            except OSError:
                return None

        audit_file = os.path.normpath("%s/audit.log" % audit_dir)
        if not os.path.exists(audit_file):
            mode = "w"
            # Create if it does not exist
            f = open(audit_file, mode)
            f.close()
        else:
            mode = "a"
    except Exception, e:
        return None, 'Error getting audit log path : %s' % str(e)
    else:
        return audit_file, None


def get_log_file_list():
    """Get a list of dicts with each dict having a date and all the rotated log files for that date."""

    nl = None
    try:
        audit_dir, err = config.get_audit_dir()
        if err:
            raise Exception(err)
        l, err = logs.get_log_file_list(audit_dir, "audit.log")
        if err:
            raise Exception(err)
        nl, err = logs.generate_display_log_file_list(l, "audit.log")
        if err:
            raise Exception(err)
    except Exception, e:
        return None, 'Error rotating audit trail : %s' % str(e)
    else:
        return nl, None


if __name__ == "__main__":
    # print _parse_audit_line('1485241451    192.168.1.53     create_remote_replication Replication of zpool/Unit2 to pool zpool on machine 192.168.1.247. Scheduled for At 12:35')
    # print _parse_audit_line('1485239641    system-initiated task_start
    # Replication of zpool/Unit1 to pool zpool on machine 192.168.1.247')
    print _parse_audit_line('1485243283    192.168.1.79     delete_zfs_snapshot       Deleted ZFS snapshot zpool/Unit1@test-dnap-2')


# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
