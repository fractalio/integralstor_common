import os
import json
import pwd
import grp

from integralstor_utils import command


def get_init_type():
    """Determine if we are on an init or a systemd type OS."""
    init_type = None
    try:
        with open('/proc/1/cmdline', 'r') as f:
            line = f.readline()
            if 'init' in line:
                init_type = 'init'
            elif 'systemd' in line:
                init_type = 'systemd'
            else:
                raise Exception('Unknown init type')
    except Exception, e:
        return None, 'Error retrieving init type : %s' % e
    else:
        return init_type, None


def get_platform():
    """Tells us if we are running an integralstor or gridcell based on the file called platform which is generated by the install process."""
    platform = None
    try:
        product_root, err = get_product_root()
        if err:
            raise Exception(err)
        with open('%s/platform' % product_root, 'r') as f:
            pd = json.load(f)
            if pd and 'platform' in pd:
                platform = pd['platform']
        if not platform or (platform not in ['integralstor', 'gridcell']):
            raise Exception('Unrecognized platform type')
    except Exception, e:
        return None, "Error retrieving platform type : %s" % str(e)
    else:
        return platform, None


def get_hardware_platform():
    """Tells us if we are running on a known hardware platform for which specific code is available."""
    platform = None
    try:
        product_root, err = get_product_root()
        if err:
            raise Exception(err)
        with open('%s/platform' % product_root, 'r') as f:
            pd = json.load(f)
            if pd and 'hardware_vendor' in pd:
                platform = pd['hardware_vendor']
    except Exception, e:
        return None, "Error retrieving platform type : %s" % str(e)
    else:
        return platform, None


def get_default_file_dir_owner():
    owner_dict = {}
    try:
        owner_dict['user'] = 'integralstor'
        owner_dict['group'] = 'integralstor'
    except Exception, e:
        return False, "Error getting default file/directory owner : %s" % (str(e))
    else:
        return owner_dict, None


def get_users_default_group():
    group_name = None
    try:
        group_name = 'integralstor'
    except Exception, e:
        return False, "Error getting user's default group name: %s" % (str(e))
    else:
        return group_name, None


def get_system_uid_gid(name, type='user'):
    """ Given a system created username or groupname depending on the type passed, return its corresponding uid or gid """
    id = -1
    try:
        system_users = ['integralstor', 'replicator', 'nagios', 'console']
        system_groups = ['integralstor', 'replicator', 'nagios', 'console']
        if type == 'user':
            list_to_use = system_users
        else:
            list_to_use = system_groups
        if name not in list_to_use:
            raise Exception('Unknown system %s : %s' % (type, username))
        if type == 'user':
            id = pwd.getpwnam(name).pw_uid
        else:
            id = grp.getgrnam(name).gr_gid
    except Exception, e:
        return False, "Error getting system %s's id: %s" % (type, str(e))
    else:
        return id, None


def get_minimum_user_uid_gid(type='user'):
    """ Given a type passed of user or group, return its corresponding minimum user created uid or gid """
    id = -1
    try:
        if type == 'user':
            id = 1500
        else:
            id = 1500
    except Exception, e:
        return False, "Error getting minimum user created  %s's id: %s" % (type, str(e))
    else:
        return id, None


def get_normal_users():
    """Gets all normal users, i.e. normal to the OS, and not the normal users that are specific to Integralstor.
    """
    try:
        ret, err = command.get_command_output(
            "awk -F'[/:]' '{if ($3 >= 1000 && $3 < 65534) print $1}' /etc/passwd")
        if err:
            raise Exception(err)

    except Exception, e:
        return None, 'Could not fetch the list of normal users: %s' % str(e)
    else:
        return ret, None


def use_salt():
    """ Shd we use salt or not? This gives us the answer. Currently, it says no for integralstor and yes for gridcell."""
    use = False
    try:
        platform, err = get_platform()
        if err:
            raise Exception(err)
        if platform and platform == 'gridcell':
            use = True
    except Exception, e:
        return False, "Error checking saltstack usage : %s" % str(e)
    else:
        return use, None


def get_product_root():
    """The install root for family of products. """
    return '/opt/integralstor', None


def get_platform_root():
    """The root directory for integralstor or gridcell. """
    root = None
    try:
        platform, err = get_platform()
        if err:
            raise Exception(err)
        product_root, err = get_product_root()
        if err:
            raise Exception(err)
        if not platform:
            raise Exception('Could not determine platform')
        if platform == 'integralstor':
            root = '%s/integralstor' % product_root
        else:
            root = '%s/integralstor_gridcell' % product_root
    except Exception, e:
        return None, "Error retrieving platform root : %s" % str(e)
    else:
        return root, None


def get_version():
    """Read the version file and return the version string."""
    version = "Unspecified"
    try:
        lines = None
        platform_root, err = get_platform_root()
        if err:
            raise Exception(err)
        with open('%s/version' % platform_root, 'r') as f:
            lines = f.readlines()
        if lines:
            version = lines[0].strip()
    except Exception, e:
        return None, "Error retrieving version number : %s" % str(e)
    else:
        return version, None


def get_pki_dir():
    """The directory where SSL certs and keys are stored. """
    dir = None
    try:
        product_root, err = get_product_root()
        if err:
            raise Exception(err)
        dir = '%s/pki' % product_root
    except Exception, e:
        return None, "Error retrieving certificates location : %s" % str(e)
    else:
        return dir, None


def get_defaults_dir():
    """The directory where the install defaults are stored. """
    ret = None
    try:
        root, err = get_platform_root()
        if err:
            raise Exception(err)
        if not root:
            raise Exception('Could not retrieve platform root')
        ret = "%s/defaults" % root
    except Exception, e:
        return None, 'Error getting defaults directory : %s' % str(e)
    else:
        return ret, None


def get_tmp_path():
    """Path to a temp dir for use in the code. """
    ret = None
    try:
        root, err = get_platform_root()
        if err:
            raise Exception(err)
        if not root:
            raise Exception('Could not retrieve platform root')
        ret = "%s/tmp" % root
    except Exception, e:
        return None, 'Error getting tmp directory : %s' % str(e)
    else:
        return ret, None


def get_python_scripts_path():
    """Path to python scripts specific to the platform."""
    ret = None
    try:
        root, err = get_platform_root()
        if err:
            raise Exception(err)
        if not root:
            raise Exception('Could not retrieve platform root')
        ret = "%s/scripts/python" % root
    except Exception, e:
        return None, 'Error getting python scripts directory : %s' % str(e)
    else:
        return ret, None


def get_common_python_scripts_path():
    """Path to python scripts config across platforms."""
    ret = None
    try:
        product_root, err = get_product_root()
        if err:
            raise Exception(err)
        ret = "%s/integralstor_utils/scripts/python" % product_root
    except Exception, e:
        return None, 'Error getting python scripts directory : %s' % str(e)
    else:
        return ret, None


def get_shell_scripts_path():
    """Path to shell scripts specific to the platform."""
    ret = None
    try:
        root, err = get_platform_root()
        if err:
            raise Exception(err)
        if not root:
            raise Exception('Could not retrieve platform root')
        ret = "%s/scripts/shell" % root
    except Exception, e:
        return None, 'Error getting shell scripts directory : %s' % str(e)
    else:
        return ret, None


def get_admin_vol_name():
    """ gridcell specific - the gluster volume used to store config info."""
    return "integralstor_admin_vol", None


def get_config_dir():
    """The path to the dir where all integralstor configs and logs are stored."""
    ret = None
    try:
        root, err = get_platform_root()
        if err:
            raise Exception(err)
        if not root:
            raise Exception('Could not retrieve platform root')
        ret = "%s/config" % root
    except Exception, e:
        return None, 'Error getting config directory : %s' % str(e)
    else:
        return ret, None


def get_config_files_dir():
    """The path to the dir where all integralstor configs and logs are stored."""
    ret = None
    try:
        config_dir, err = get_config_dir()
        if err:
            raise Exception(err)
        if not config_dir:
            raise Exception('Could not retrieve configuration directory')
        ret = "%s/conf_files" % config_dir
    except Exception, e:
        return None, 'Error getting configuration files directory : %s' % str(e)
    else:
        return ret, None


def get_salt_master_config():
    """ The salt master file """
    return '/etc/salt/master', None


def get_krb5_conf_path():
    """Path to the kerberos config file."""
    return '/etc', None


def get_smb_conf_path():
    """Path to the samba config file."""
    return '/etc/samba', None


def get_system_status_path():
    """The path to the dir where the system status and manifest files are stored."""
    ret = None
    try:
        root, err = get_config_dir()
        if err:
            raise Exception(err)
        if not root:
            raise Exception('Could not retrieve platform root')
        ret = "%s/status" % root
    except Exception, e:
        return None, 'Error getting system status directory : %s' % str(e)
    else:
        return ret, None


def get_log_folder_path():
    """The path to the dir where integralstor specific logs are stored. """
    ret = None
    try:
        root, err = get_config_dir()
        if err:
            raise Exception(err)
        if not root:
            raise Exception('Could not retrieve platform root')
        ret = "%s/logs" % root
    except Exception, e:
        return None, 'Error getting logs directory : %s' % str(e)
    else:
        return ret, None


def get_ntp_conf_path():
    """The path where the ntp.conf is stored."""
    return "/etc", None


def get_db_path():
    """Path where the integralstor database is stored."""
    ret = None
    try:
        root, err = get_config_dir()
        if err:
            raise Exception(err)
        if not root:
            raise Exception('Could not retrieve config root')
        ret = "%s/db/integral_view_config.db" % root
    except Exception, e:
        return None, 'Error getting system database directory : %s' % str(e)
    else:
        return ret, None


def get_urbackup_db_path():
    """Path where UrBackup database is located

    """
    ret = None
    try:
        ret = '/var/urbackup/backup_server.db'
    except Exception, e:
        return None, 'Error getting UrBackup database path: %s' % str(e)
    else:
        return ret, None


def get_urbackup_reports_path():
    """Path where UrBackup reports are held

    """
    ret = None
    try:
        """
        root, err = get_config_dir()
        if err:
            raise Exception(err)
        if not root:
            raise Exception('Could not retrieve config root')
        ret = "%s/reports/urbackup" % root
        """
        ret = "/var/log/integralstor/reports/urbackup"

    except Exception, e:
        return None, 'Error getting UrBackup reports path: %s' % str(e)
    else:
        return ret, None


def get_batch_files_path():
    """Path to the location where batch process files are generated and stored. Mainly used in gridcell."""
    ret = None
    try:
        root, err = get_config_dir()
        if err:
            raise Exception(err)
        if not root:
            raise Exception('Could not retrieve config root')
        ret = "%s/batch_processes" % root
    except Exception, e:
        return None, 'Error getting system batch processes directory : %s' % str(e)
    else:
        return ret, None


def get_audit_dir():
    """Path to the audit log dir."""
    ret = None
    try:
        root, err = get_log_folder_path()
        if err:
            raise Exception(err)
        if not root:
            raise Exception('Could not retrieve logs root')
        ret = "%s/audit" % root
    except Exception, e:
        return None, 'Error getting system audit logs directory : %s' % str(e)
    else:
        return ret, None


def get_alerts_dir():
    """Path to the alerts log dir."""
    ret = None
    try:
        root, err = get_log_folder_path()
        if err:
            raise Exception(err)
        if not root:
            raise Exception('Could not retrieve config root')
        ret = "%s/alerts" % root
    except Exception, e:
        return None, 'Error getting system alerts log directory : %s' % str(e)
    else:
        return ret, None


def main():
    # print get_platform()
    # print get_hardware_platform()
    # print get_version()
    # print get_system_uid_gid('integralstor', type = 'user')
    # print get_minimum_user_uid_gid('user')
    # print get_normal_users()
    print get_urbackup_db_path()


if __name__ == "__main__":
    main()

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
