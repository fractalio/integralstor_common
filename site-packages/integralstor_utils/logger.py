import logging
import logging.handlers


def get_script_logger(name, file, level=logging.DEBUG):
    """Return a logger object for the specified name using the specified file"""
    logger = None
    try:
        if (not name) or (not file):
            raise Exception('Required parameters not provided')
        logger = logging.getLogger(name)
        logger.setLevel(logging.DEBUG)
        handler = logging.handlers.WatchedFileHandler(file)
        handler.setLevel(logging.DEBUG)
        formatter = logging.Formatter(
            '%(asctime)s : %(levelname)s : %(name)s - %(message)s', "%Y-%m-%d %H:%M:%S")
        handler.setFormatter(formatter)
        logger.addHandler(handler)
    except Exception, e:
        return None, 'Error initializing file logger : %s' % e
    else:
        return logger, None


def zero_logs():
    try:
        with open('/var/log/integralstor/scripts.log', 'w') as f:
            pass
    except Exception, e:
        return False, "Error zeroing logs : %s" % str(e)
    else:
        return True, None


def log_or_print(msg, logger=None, level='info'):
    """If the logger is passed, log using it, else print"""
    try:
        if logger:
            if level == 'info':
                logger.info(msg)
            elif level == 'debug':
                logger.debug(msg)
            elif level == 'error':
                logger.error(msg)
            elif level == 'critical':
                logger.critical(msg)
        else:
            print msg
    except Exception, e:
        return False, 'Error during log or print : %s' % e
    else:
        return True, None


# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
